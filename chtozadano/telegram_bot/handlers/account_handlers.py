import asyncio
import datetime
import os

from aiogram import F, html, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from constants import DOCKER_URL
from filters import AccountStateFilter
from handlers.register_handlers import command_reset_handler
from keyboards import kb_menu
from keyboards.account import (
    account_become_admin,
    account_change_contacts,
    account_menu,
    account_settings,
)
import requests
from states import Account, ChangeContacts
from utils import check_for_admin

rp_account_router = Router()


@rp_account_router.message(F.text == "–ê–∫–∫–∞—É–Ω—Çüë§")
async def account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.start)
    if await check_for_admin(message.from_user.id) == "admin":
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=kb_menu.account_admin_page_rp_kb(),
        )
    else:
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=account_menu.account_user_page_rp_kb(),
        )


@rp_account_router.message(F.text == "–ò–º—è –∏ –§–∞–º–∏–ª–∏—è‚úèÔ∏è", AccountStateFilter)
async def change_contacts_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    if await check_for_admin(message.chat.id) == "admin":
        await message.answer(
            "–¢—ã —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ—ç—Ç–æ–º—É"
            " –Ω–µ –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
            " –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
        )
        await account_handler(message, state)
        return
    await state.set_state(Account.change_contacts)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    response = response.json()
    first_name = response["first_name"]
    last_name = response["last_name"]
    answer_message = (
        f"–°–µ–π—á–∞—Å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:\n–ò–º—è: {html.bold(first_name)}\n"
        f"–§–∞–º–∏–ª–∏—è: {html.bold(last_name)}\n\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è"
        f" –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"
        f" –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    await message.answer(
        text=answer_message,
        reply_markup=account_change_contacts.change_contacts_rp_kb(),
    )


@rp_account_router.message(F.text == "–ù–∞–∑–∞–¥", AccountStateFilter)
async def redirect_to_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.start)
    if await check_for_admin(message.from_user.id) == "admin":
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=kb_menu.account_admin_page_rp_kb(),
        )
    else:
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=account_menu.account_user_page_rp_kb(),
        )


@rp_account_router.message(
    F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µüìù",
    AccountStateFilter,
)
async def first_name_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(ChangeContacts.first_name)
    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:",
    )


@rp_account_router.message(ChangeContacts.first_name)
async def last_name_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.update_data(first_name=message.text)
    await state.set_state(ChangeContacts.last_name)
    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:",
    )


@rp_account_router.message(ChangeContacts.last_name)
async def redirect_from_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.update_data(last_name=message.text)
    data = await state.get_data()
    data["first_name"] = data["first_name"][:15]
    data["last_name"] = data["last_name"][:15]
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
            "first_name": data["first_name"],
            "last_name": data["last_name"],
        },
    )
    await state.clear()
    await change_contacts_account_handler(message, state)


@rp_account_router.message(Command("change_contacts"))
async def redirect_change_contacts(
    message: Message,
    state: FSMContext,
) -> None:
    await change_contacts_account_handler(message, state)


@rp_account_router.message(F.text == "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Åüè´", AccountStateFilter)
async def change_class_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.clear()
    await command_reset_handler(message, state)


@rp_account_router.message(
    F.text == "–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüë®‚Äçüíº",
    AccountStateFilter,
)
async def become_admin_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    if await check_for_admin(message.from_user.id) == "admin":
        await state.set_state(Account.start)
        await message.answer(
            "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüòâ",
            reply_markup=kb_menu.account_admin_page_rp_kb(),
        )
    else:
        response = response.json()
        first_name = response["first_name"]
        last_name = response["last_name"]
        await message.answer(
            text=f"–°—Ç–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å"
            f" –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏"
            f" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {html.bold(first_name)}\n"
            f"–§–∞–º–∏–ª–∏—è: {html.bold(last_name)}\n\n"
            f"–î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –º–µ–Ω—é {html.bold('–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è‚úèÔ∏è')},"
            f" –∏–ª–∏ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /change_contacts\n"
            f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá",
            reply_markup=account_become_admin.become_admin_rp_kb(),
        )


@rp_account_router.message(Command("become_admin"))
async def command_become_admin_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await become_admin_account_handler(message, state)


@rp_account_router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—ÉüìÅ")
async def send_become_admin_handler(
    message: Message,
    state: FSMContext,
) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/become_admin/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    response_data = response.json()
    try:
        answer = response_data["error"]
    except KeyError:
        answer = response_data["success"]
    if answer == "Wait pls":
        await message.answer(
            text="–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚è∞",
        )
    elif answer == "Successful":
        await message.answer(
            "‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∑–∞ 48"
            " —á–∞—Å–æ–≤ - —Å–≤—è–∂–∏—Å—å —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:\n"
            "¬∑ @alex010407\n¬∑ @tabara_bulkala",
        )
    elif answer == "You are already admin":
        await message.answer(
            "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        )
    await state.set_state(Account.start)


@rp_account_router.message(Command("show_become_admin"))
async def command_show_become_admin_handler(
    message: Message,
) -> None:
    if await check_for_admin(message.chat.id) == "superuser":
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/show_become_admin/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": message.chat.id,
            },
        )
        data = response.json()
        if not data:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :/")
            return
        for request in data:
            created_at = datetime.datetime.strptime(
                request["created_at"],
                "%Y-%m-%dT%H:%M:%S.%f",
            ).date()
            user_id = request["telegram_id"]
            await message.answer(
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{request['id']}\n\n–ö–ª–∞—Å—Å: {request['grade']}"
                f"{request['letter']}\n–ì—Ä—É–ø–ø–∞: {request['group']}\n"
                f"–ò–º—è: {request['first_name']}\n"
                f"–§–∞–º–∏–ª–∏—è: {request['last_name']}\n"
                f"–î–∞—Ç–∞: {created_at}\n"
                f"tg://openmessage?user_id={request['telegram_id']}\n",
                reply_markup=account_become_admin.show_become_admin_in_kb(
                    user_id,
                ),
            )


@rp_account_router.callback_query(F.data == "become_admin_requests")
async def redirect_show_become_admin_handler(call: CallbackQuery) -> None:
    await command_show_become_admin_handler(call.message)


@rp_account_router.callback_query(
    F.data.startswith("decision_show_become_admin_"),
)
async def decision_show_become_admin(
    call: CallbackQuery,
) -> None:
    await call.message.delete()
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/become_admin_accept_decline/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": call.from_user.id,
            "candidate_id": call.data.split("_")[-1],
            "decision": call.data.split("_")[-2],
        },
    )


@rp_account_router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†Ô∏è")
async def settings_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.settings)
    chat_mode = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_chat_mode/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    quotes_status = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_quotes_status/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    chat_mode = chat_mode.json()["chat_mode"]
    if chat_mode:
        chat_mode = "–í–∫–ª—é—á–µ–Ω"
    else:
        chat_mode = "–í—ã–∫–ª—é—á–µ–Ω"
    quotes_status = quotes_status.json()["quotes_status"]
    if quotes_status:
        quotes_status = "–í–∫–ª—é—á–µ–Ω"
    else:
        quotes_status = "–í—ã–∫–ª—é—á–µ–Ω"
    await message.answer(
        text="–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n¬∑ –†–µ–∂–∏–º —á–∞—Ç–∞ - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, "
        "—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –¥–æ–º–∞—à–∫–∏ - —Ç—ã —É–≤–∏–¥–∏—à—å –µ–µ\n"
        "¬∑ –†–µ–∂–∏–º —Ü–∏—Ç–∞—Ç - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ç–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é (/menu)"
        " —Ç—ã —É–≤–∏–¥–∏—à—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É",
    )
    await message.answer(
        text=f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"¬∑ –†–µ–∂–∏–º —á–∞—Ç–∞: {html.bold(chat_mode)}\n"
        f"¬∑ –†–µ–∂–∏–º —Ü–∏—Ç–∞—Ç: {html.bold(quotes_status)}",
        reply_markup=account_settings.settings_rp_kb(),
    )


@rp_account_router.message(
    F.text == "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —á–∞—Ç–∞üí¨",
    AccountStateFilter,
)
async def chat_mode_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_chat_mode/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    await settings_handler(message, state)


@rp_account_router.message(
    F.text == "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ü–∏—Ç–∞—Çüìì",
    AccountStateFilter,
)
async def quotes_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_quotes/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    await settings_handler(message, state)


@rp_account_router.message(Command("settings"))
async def command_settings_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await settings_handler(message, state)
