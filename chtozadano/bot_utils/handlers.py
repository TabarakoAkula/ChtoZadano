import asyncio
import json
import os
import random

from aiogram import F, html, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from bot_utils import keyboards
from bot_utils.filters import ScheduleStateFilter
from bot_utils.states import Register, Schedule
import dotenv
import requests

dotenv.load_dotenv()

DOMAIN_URL = os.getenv("DOMAIN_URL")
DOCKER_URL = os.getenv("DOCKER_URL")

MENU_MESSAGES = [
    "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è —á—É–¥–Ω—ã–π –¥–µ–Ω—åüîÆ",
    f"–ú—ã –≤—Å–µ —É—á–∏–ª–∏—Å—å –ø–æ–Ω–µ–º–Ω–æ–≥—É —á–µ–º—É-–Ω–∏–±—É–¥—å –∏ –∫–∞–∫-–Ω–∏–±—É–¥—å.\n"
    f"- {html.italic('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á –ü—É—à–∫–∏–Ω')}",
    f"–£—á–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç, –ø–æ –Ω–∞—Ä–æ–¥–Ω–æ–π –ø–æ—Å–ª–æ–≤–∏—Ü–µ, ‚Äî –æ–Ω–æ —Ç–∞–∫–∂–µ –∏ —Å–≤–æ–±–æ–¥–∞."
    f" –ù–∏—á—Ç–æ —Ç–∞–∫ –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∫ –∑–Ω–∞–Ω–∏–µ.\n"
    f"- {html.italic('–ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –¢—É—Ä–≥–µ–Ω–µ–≤')}",
    f"–ß–µ–º—É –±—ã —Ç—ã –Ω–∏ —É—á–∏–ª—Å—è, —Ç—ã —É—á–∏—à—å—Å—è –¥–ª—è —Å–µ–±—è.\n"
    f"- {html.italic('–ü–µ—Ç—Ä–æ–Ω–∏–π –ê—Ä–±–∏—Ç—Ä –ì–∞–π')}",
    f"–í —É—á–µ–Ω–∏–∏ –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è.\n- {html.italic('–°—é–Ω—å-—Ü–∑—ã')}",
    f"–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ–≤—ã —É—á–∞—â–µ–≥–æ—Å—è ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ—á–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
    f" –≤—Å—è–∫–æ–≥–æ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–æ–≥–æ —É—á–µ–Ω–∏—è.\n"
    f"- {html.italic('–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á –£—à–∏–Ω—Å–∫–∏–π')}",
    f"–ö—Ç–æ –Ω–∏ –æ —á–µ–º –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Ç–æ—Ç –Ω–∏—á–µ–º—É –Ω–µ –Ω–∞—É—á–∏—Ç—Å—è.\n"
    f"- {html.italic('–¢–æ–º–∞—Å –§—É–ª–ª–µ—Ä')}",
    f"–ù–∞–¥–æ –º–Ω–æ–≥–æ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —Ö–æ—Ç—å –Ω–µ–º–Ω–æ–≥–æ.\n"
    f"- {html.italic('–®–∞—Ä–ª—å –õ—É–∏ –ú–æ–Ω—Ç–µ—Å–∫—å–µ')}",
    f"–¢–æ—Ç, –∫—Ç–æ –Ω–µ –∂–µ–ª–∞–µ—Ç —É—á–∏—Ç—å—Å—è, ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º.\n"
    f"- {html.italic('–•–æ—Å–µ –•—É–ª–∏–∞–Ω –ú–∞—Ä—Ç–∏')}",
    f"–£—á–µ–Ω—å–µ —Å–≤–µ—Ç, –∞ –Ω–µ—É—á–µ–Ω—å–µ ‚Äî —Ç—å–º–∞. –î–µ–ª–æ –º–∞—Å—Ç–µ—Ä–∞ –±–æ–∏—Ç—Å—è.\n"
    f"- {html.italic('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á –°—É–≤–æ—Ä–æ–≤')}",
    f"–ù–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –Ω–∏ –º—É–¥—Ä–æ—Å—Ç—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã,"
    f" –µ—Å–ª–∏ –∏–º –Ω–µ —É—á–∏—Ç—å—Å—è.\n"
    f"- {html.italic('–î–µ–º–æ–∫—Ä–∏—Ç')}",
    f"–ù–∞–¥–æ –º–Ω–æ–≥–æ —É—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –æ—Å–æ–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–Ω–∞–µ—à—å –º–∞–ª–æ.\n"
    f"- {html.italic('–ú–∏—à–µ–ª—å –¥–µ –ú–æ–Ω—Ç–µ–Ω—å')}",
]

WEEK_DAYS = {
    1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    2: "–í—Ç–æ—Ä–Ω–∏–∫",
    3: "–°—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä–≥",
    5: "–ü—è—Ç–Ω–∏—Ü–∞",
    6: "–°—É–±–±–æ—Ç–∞",
}

rp = Router()


@rp.message(Command("help"))
async def command_help_handler(message: Message):
    await message.answer(
        "/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
        "/reset - —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å\n"
        "/menu - –º–µ–Ω—é\n"
        "/code - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
        "/get_week_schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/get_tomorrow_schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n",
    )


@rp.message(Command("start"))
async def command_start_handler(message: Message, state: FSMContext):
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/is_user_in_system/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    if response.text.lower() == "true":
        await message.answer(
            "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å, –¥–ª—è —Å–º–µ–Ω—ã –∫–ª–∞—Å—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /reset",
        )
        await command_menu_handler(message)
    else:
        await state.set_state(Register.choose_class)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å,"
            " –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É",
            reply_markup=keyboards.choose_gr_let_in_kb(),
        )


@rp.message(Command("reset"))
async def command_reset_handler(message: Message, state: FSMContext):
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/is_user_admin/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    response_data = json.loads(response.json())
    if response_data["is_admin"] and not response_data["is_superuser"]:
        await message.answer(
            "–¢—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Å–≤–æ–µ–º –∫–ª–∞—Å—Å–µ,"
            " –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å\n\n"
            "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫—É"
            " –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–∞–π—Ç–æ–º\n\n"
            "–ï—Å–ª–∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º -"
            " –Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ–º—É –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "¬∑ @alex010407\n¬∑ @tabara_bulkala",
        )
    else:
        await state.set_state(Register.choose_class)
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É",
            reply_markup=keyboards.choose_gr_let_in_kb(),
        )


@rp.callback_query(Register.choose_class, F.data.startswith("ch_gr_let_"))
async def choose_group_handler(call: CallbackQuery, state: FSMContext):
    await call.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data.split('_')[-1]}")
    await state.update_data(choose_class=call.data.split("_")[-1])
    await state.set_state(Register.choose_group)
    await call.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É—á–∏—Ç–µ—Å—å",
        reply_markup=keyboards.choose_group_in_kb(),
    )


@rp.callback_query(Register.choose_group, F.data.startswith("ch_group_"))
async def start_redirect_to_menu_handler(
    call: CallbackQuery,
    state: FSMContext,
):
    await state.update_data(choose_group=call.data.split("_")[-1])
    user_data = await state.get_data()
    grade = user_data["choose_class"][:-1]
    letter = user_data["choose_class"][-1]
    group = user_data["choose_group"]

    await call.message.answer(
        f"–í—ã –≤ {html.italic(grade)}{html.italic(letter)}"
        f" –∫–ª–∞—Å—Å–µ, –≥—Ä—É–ø–ø–∞ {html.italic(group)}",
    )
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/create_user/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": call.from_user.id,
            "grade": grade,
            "letter": letter,
            "group": group,
            "name": call.from_user.username,
        },
    )
    await state.clear()
    await call.message.answer(
        "–ù–∞ —ç—Ç–æ–º –≤—Å—ë. –¢–µ–ø–µ—Ä—å —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞"
        " —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é. –ß—Ç–æ–±—ã"
        " —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤"
        " –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω—É–≤"
        " –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n–ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É —Ç–µ–±—è –Ω–µ"
        " –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è, –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ"
        " –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç https://hw116.ru"
        " –ò –Ω–µ –∑–∞–±—ã–≤–∞–π - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        " –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help",
    )
    await command_menu_handler(call.message)


@rp.message(Command("menu"))
async def command_menu_handler(message: Message):
    await message.answer(
        text=random.choice(MENU_MESSAGES),
        reply_markup=keyboards.menu_rp_kb(),
    )


@rp.callback_query(F.data == "back_to_start", Register.choose_group)
async def redirect_to_start_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(Register.start)
    await command_start_handler(call.message, state)


@rp.message(Command("code"))
async def site_register_handler(message: Message) -> None:
    confirmation_code = random.randint(111111, 999999)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/code_confirmation/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
            "confirmation_code": confirmation_code,
            "name": message.from_user.first_name,
        },
    )
    if response.status_code == 200:
        await message.answer(
            f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {html.code(confirmation_code)}",
            reply_markup=keyboards.open_site_in_kb(DOMAIN_URL),
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@rp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì")
async def schedule_handler(message: Message, state: FSMContext):
    await state.set_state(Schedule.start)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–ù–∞ –Ω–µ–¥–µ–ª—é", ScheduleStateFilter)
async def schedule_week_handler(message: Message, state: FSMContext):
    await state.set_state(Schedule.week_schedule)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_week_schedule/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboards.schedule_rp_kb(),
    )
    schedule = response.json()
    weekday_now = 0
    result_message = ""
    for i in schedule:
        if i["weekday"] == weekday_now:
            result_message += f"{i['lesson']}. {i['subject']}\n"
        else:
            result_message += f"\n{WEEK_DAYS[i['weekday']]}:\n"
            result_message += f"{i['lesson']}. {i['subject']}\n"
            weekday_now = i["weekday"]
    await message.answer(
        result_message,
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞", ScheduleStateFilter)
async def schedule_tomorrow_handler(message: Message, state: FSMContext):
    await state.set_state(Schedule.tomorrow_schedule)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_tomorrow_schedule/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboards.schedule_rp_kb(),
    )
    schedule = response.json()
    result_message = WEEK_DAYS[schedule[0]["weekday"]] + ":"
    for i in schedule:
        result_message += f"\n{i['lesson']}. {i['subject']}"
    await message.answer(
        result_message,
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è", ScheduleStateFilter)
async def schedule_back_handler(message: Message, state: FSMContext):
    await state.clear()
    await command_menu_handler(message)


@rp.message(Command("get_week_schedule"))
async def command_week_schedule_handler(
    message: Message,
    state: FSMContext,
):
    await schedule_week_handler(message, state)


@rp.message(Command("get_tomorrow_schedule"))
async def command_tomorrow_schedule_handler(
    message: Message,
    state: FSMContext,
):
    await schedule_tomorrow_handler(message, state)
