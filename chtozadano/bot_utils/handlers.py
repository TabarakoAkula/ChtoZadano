import asyncio
import datetime
import os
import random

from aiogram import F, html, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ContentType, Message
from bot_utils import keyboards
from bot_utils.bot import bot
from bot_utils.filters import (
    AccountStateFilter,
    AddHomeworkStateFilter,
    EditHomeworkStateFilter,
    HomeworkStateFilter,
    PublishHomeworkStateFilter,
    ScheduleStateFilter,
)
from bot_utils.message_texts import MENU_MESSAGES, SUBJECTS, WEEK_DAYS
from bot_utils.states import (
    Account,
    AddHomework,
    ChangeContacts,
    EditHomework,
    Homework,
    Register,
    Schedule,
)
from bot_utils.utils import (
    bot_save_files,
    check_for_admin,
    delete_become_admin,
    delete_homework,
    edit_hw_description,
    generate_homework,
    get_homework_from_id,
    get_user_subjects,
    publish_homework,
)
import dotenv
import requests

dotenv.load_dotenv()

DOMAIN_URL = os.getenv("DOMAIN_URL")
DOCKER_URL = os.getenv("DOCKER_URL")

rp = Router()


@rp.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    await message.answer(
        "/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
        "/reset - —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å\n"
        "/menu - –º–µ–Ω—é\n"
        "/code - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
        "/get_week_schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/get_tomorrow_schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/change_contacts - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n"
        "/become_admin - —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/tomorrow - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/subject - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n"
        "/new - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "/stop - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n",
    )


# /show_become_admin - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# /add_mailing - –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é


@rp.message(Command("start"))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/is_user_in_system/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    if response.text.lower() == "true":
        await message.answer(
            "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å, –¥–ª—è —Å–º–µ–Ω—ã –∫–ª–∞—Å—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /reset",
        )
        await command_menu_handler(message)
    else:
        await state.set_state(Register.choose_class)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å,"
            " –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É",
            reply_markup=keyboards.choose_gr_let_in_kb(),
        )


@rp.message(Command("reset"))
async def command_reset_handler(message: Message, state: FSMContext) -> None:
    if await check_for_admin(message.from_user.id) == "admin":
        await message.answer(
            "–¢—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Å–≤–æ–µ–º –∫–ª–∞—Å—Å–µ,"
            " –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å\n\n"
            "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫—É"
            " –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–∞–π—Ç–æ–º\n\n"
            "–ï—Å–ª–∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º -"
            " –Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ–º—É –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "¬∑ @alex010407\n¬∑ @tabara_bulkala",
            reply_markup=keyboards.menu_rp_kb(),
        )
    else:
        await delete_become_admin(message.from_user.id)
        await state.set_state(Register.choose_class)
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —É—á–∏—à—å—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É",
            reply_markup=keyboards.choose_gr_let_in_kb(),
        )


@rp.callback_query(Register.choose_class, F.data.startswith("ch_gr_let_"))
async def choose_group_handler(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data.split('_')[-1]}")
    await state.update_data(choose_class=call.data.split("_")[-1])
    await state.set_state(Register.choose_group)
    await call.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É—á–∏—Ç–µ—Å—å",
        reply_markup=keyboards.choose_group_in_kb(),
    )


@rp.callback_query(Register.choose_group, F.data.startswith("ch_group_"))
async def start_redirect_to_menu_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await state.update_data(choose_group=call.data.split("_")[-1])
    user_data = await state.get_data()
    grade = user_data["choose_class"][:-1]
    letter = user_data["choose_class"][-1]
    group = user_data["choose_group"]

    await call.message.answer(
        f"–í—ã –≤ {html.italic(grade)}{html.italic(letter)}"
        f" –∫–ª–∞—Å—Å–µ, –≥—Ä—É–ø–ø–∞ {html.italic(group)}",
    )
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/create_user/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": call.from_user.id,
            "grade": grade,
            "letter": letter,
            "group": group,
            "name": call.from_user.username,
        },
    )
    await state.clear()
    await call.message.answer(
        "–ù–∞ —ç—Ç–æ–º –≤—Å—ë. –¢–µ–ø–µ—Ä—å —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞"
        " —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é. –ß—Ç–æ–±—ã"
        " —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –≤"
        " –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω—É–≤"
        " –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n–ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É —Ç–µ–±—è –Ω–µ"
        " –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è, –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ"
        " –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —Å–∞–π—Ç https://hw116.ru"
        " –ò –Ω–µ –∑–∞–±—ã–≤–∞–π - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        " –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help",
    )
    await command_menu_handler(call.message)


@rp.message(Command("menu"))
async def command_menu_handler(message: Message) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_quotes_status/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    if response.json()["quotes_status"]:
        await message.answer(
            text=random.choice(MENU_MESSAGES),
            reply_markup=keyboards.menu_rp_kb(),
        )
    else:
        await message.answer(
            text="–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é",
            reply_markup=keyboards.menu_rp_kb(),
        )


@rp.callback_query(F.data == "back_to_start", Register.choose_group)
async def redirect_to_start_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await state.set_state(Register.start)
    await command_start_handler(call.message, state)


@rp.message(Command("code"))
async def site_register_handler(message: Message) -> None:
    confirmation_code = random.randint(111111, 999999)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/code_confirmation/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
            "confirmation_code": confirmation_code,
            "name": message.from_user.first_name,
        },
    )
    if response.status_code == 200:
        await message.answer(
            f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {html.code(confirmation_code)}",
            reply_markup=keyboards.open_site_in_kb(DOMAIN_URL),
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@rp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì")
async def schedule_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Schedule.start)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–ù–∞ –Ω–µ–¥–µ–ª—é", ScheduleStateFilter)
async def schedule_week_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Schedule.week_schedule)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_week_schedule/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboards.schedule_rp_kb(),
    )
    schedule = response.json()
    weekday_now = 0
    result_message = ""
    for i in schedule:
        if i["weekday"] == weekday_now:
            result_message += f"{i['lesson']}. {i['subject']}\n"
        else:
            result_message += f"\n{WEEK_DAYS[i['weekday']]}:\n"
            result_message += f"{i['lesson']}. {i['subject']}\n"
            weekday_now = i["weekday"]
    await message.answer(
        result_message,
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞", ScheduleStateFilter)
async def schedule_tomorrow_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Schedule.tomorrow_schedule)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_tomorrow_schedule/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=keyboards.schedule_rp_kb(),
    )
    schedule = response.json()
    result_message = WEEK_DAYS[schedule[0]["weekday"]] + ":"
    for i in schedule:
        result_message += f"\n{i['lesson']}. {i['subject']}"
    await message.answer(
        result_message,
        reply_markup=keyboards.schedule_rp_kb(),
    )


@rp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è")
async def schedule_back_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await command_menu_handler(message)


@rp.callback_query(F.data == "back_to_menu")
async def inline_back_handler(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå")
    await command_menu_handler(call.message)


@rp.message(Command("get_week_schedule"))
async def command_week_schedule_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await schedule_week_handler(message, state)


@rp.message(Command("get_tomorrow_schedule"))
async def command_tomorrow_schedule_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await schedule_tomorrow_handler(message, state)


@rp.message(F.text == "–ê–∫–∫–∞—É–Ω—Çüë§")
async def account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.start)
    if await check_for_admin(message.from_user.id) == "admin":
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=keyboards.account_admin_page_rp_kb(),
        )
    else:
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=keyboards.account_user_page_rp_kb(),
        )


@rp.message(F.text == "–ò–º—è –∏ –§–∞–º–∏–ª–∏—è‚úèÔ∏è", AccountStateFilter)
async def change_contacts_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    if await check_for_admin(message.chat.id) == "admin":
        await message.answer(
            "–¢—ã —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ—ç—Ç–æ–º—É"
            " –Ω–µ –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
            " –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
        )
        await account_handler(message, state)
        return
    await state.set_state(Account.change_contacts)
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    response = response.json()
    first_name = response["first_name"]
    last_name = response["last_name"]
    answer_message = (
        f"–°–µ–π—á–∞—Å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:\n–ò–º—è: {html.bold(first_name)}\n"
        f"–§–∞–º–∏–ª–∏—è: {html.bold(last_name)}\n\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è"
        f" –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"
        f" –∑–∞—è–≤–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    await message.answer(
        text=answer_message,
        reply_markup=keyboards.change_contacts_rp_kb(),
    )


@rp.message(F.text == "–ù–∞–∑–∞–¥", AccountStateFilter)
async def redirect_to_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.start)
    if await check_for_admin(message.from_user.id) == "admin":
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=keyboards.account_admin_page_rp_kb(),
        )
    else:
        await message.answer(
            "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=keyboards.account_user_page_rp_kb(),
        )


@rp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µüìù", AccountStateFilter)
async def first_name_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(ChangeContacts.first_name)
    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:",
    )


@rp.message(ChangeContacts.first_name)
async def last_name_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.update_data(first_name=message.text)
    await state.set_state(ChangeContacts.last_name)
    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:",
    )


@rp.message(ChangeContacts.last_name)
async def redirect_from_change_contacts_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.update_data(last_name=message.text)
    data = await state.get_data()
    data["first_name"] = data["first_name"][:15]
    data["last_name"] = data["last_name"][:15]
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
            "first_name": data["first_name"],
            "last_name": data["last_name"],
        },
    )
    await state.clear()
    await change_contacts_account_handler(message, state)


@rp.message(Command("change_contacts"))
async def redirect_change_contacts(
    message: Message,
    state: FSMContext,
) -> None:
    await change_contacts_account_handler(message, state)


@rp.message(F.text == "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Åüè´", AccountStateFilter)
async def change_class_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.clear()
    await command_reset_handler(message, state)


@rp.message(F.text == "–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüë®‚Äçüíº", AccountStateFilter)
async def become_admin_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_contacts/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.from_user.id,
        },
    )
    if await check_for_admin(message.from_user.id) == "admin":
        await state.set_state(Account.start)
        await message.answer(
            "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüòâ",
            reply_markup=keyboards.account_admin_page_rp_kb(),
        )
    else:
        response = response.json()
        first_name = response["first_name"]
        last_name = response["last_name"]
        await message.answer(
            text=f"–°—Ç–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å"
            f" –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏"
            f" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {html.bold(first_name)}\n"
            f"–§–∞–º–∏–ª–∏—è: {html.bold(last_name)}\n\n"
            f"–î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –º–µ–Ω—é {html.bold('–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è‚úèÔ∏è')},"
            f" –∏–ª–∏ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /change_contacts\n"
            f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá",
            reply_markup=keyboards.become_admin_rp_kb(),
        )


@rp.message(Command("become_admin"))
async def command_become_admin_account_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await become_admin_account_handler(message, state)


@rp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—ÉüìÅ")
async def send_become_admin_handler(
    message: Message,
    state: FSMContext,
) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/become_admin/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    response_data = response.json()
    try:
        answer = response_data["error"]
    except KeyError:
        answer = response_data["success"]
    if answer == "Wait pls":
        await message.answer(
            text="–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚è∞",
        )
    elif answer == "Successful":
        await message.answer(
            "‚úÖ–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∑–∞ 48"
            " —á–∞—Å–æ–≤ - —Å–≤—è–∂–∏—Å—å —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:\n"
            "¬∑ @alex010407\n¬∑ @tabara_bulkala",
        )
    elif answer == "You are already admin":
        await message.answer(
            "–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        )
    await state.set_state(Account.start)


@rp.message(Command("show_become_admin"))
async def command_show_become_admin_handler(
    message: Message,
) -> None:
    if await check_for_admin(message.chat.id) == "superuser":
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/show_become_admin/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": message.chat.id,
            },
        )
        data = response.json()
        if not data:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :/")
            return
        for request in data:
            created_at = datetime.datetime.strptime(
                request["created_at"],
                "%Y-%m-%dT%H:%M:%S.%f",
            ).date()
            user_id = request["telegram_id"]
            await message.answer(
                f"–ó–∞—è–≤–∫–∞ ‚Ññ{request['id']}\n\n–ö–ª–∞—Å—Å: {request['grade']}"
                f"{request['letter']}\n–ì—Ä—É–ø–ø–∞: {request['group']}\n"
                f"–ò–º—è: {request['first_name']}\n"
                f"–§–∞–º–∏–ª–∏—è: {request['last_name']}\n"
                f"–î–∞—Ç–∞: {created_at}\n"
                f"tg://openmessage?user_id={request['telegram_id']}\n",
                reply_markup=keyboards.show_become_admin_in_kb(user_id),
            )


@rp.callback_query(F.data.startswith("decision_show_become_admin_"))
async def decision_show_become_admin(
    call: CallbackQuery,
) -> None:
    await call.message.delete()
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/become_admin_accept_decline/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": call.from_user.id,
            "candidate_id": call.data.split("_")[-1],
            "decision": call.data.split("_")[-2],
        },
    )


@rp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†Ô∏è")
async def settings_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Account.settings)
    chat_mode = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_chat_mode/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    quotes_status = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_quotes_status/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    chat_mode = chat_mode.json()["chat_mode"]
    if chat_mode:
        chat_mode = "–í–∫–ª—é—á–µ–Ω"
    else:
        chat_mode = "–í—ã–∫–ª—é—á–µ–Ω"
    quotes_status = quotes_status.json()["quotes_status"]
    if quotes_status:
        quotes_status = "–í–∫–ª—é—á–µ–Ω"
    else:
        quotes_status = "–í—ã–∫–ª—é—á–µ–Ω"
    await message.answer(
        text="–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n¬∑ –†–µ–∂–∏–º —á–∞—Ç–∞ - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, "
        "—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –¥–æ–º–∞—à–∫–∏ - —Ç—ã —É–≤–∏–¥–∏—à—å –µ–µ\n"
        "¬∑ –†–µ–∂–∏–º —Ü–∏—Ç–∞—Ç - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ç–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é (/menu)"
        " —Ç—ã —É–≤–∏–¥–∏—à—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É",
    )
    await message.answer(
        text=f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"¬∑ –†–µ–∂–∏–º —á–∞—Ç–∞: {html.bold(chat_mode)}\n"
        f"¬∑ –†–µ–∂–∏–º —Ü–∏—Ç–∞—Ç: {html.bold(quotes_status)}",
        reply_markup=keyboards.settings_rp_kb(),
    )


@rp.message(F.text == "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —á–∞—Ç–∞üí¨", AccountStateFilter)
async def chat_mode_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_chat_mode/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    await settings_handler(message, state)


@rp.message(F.text == "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ü–∏—Ç–∞—Çüìì", AccountStateFilter)
async def quotes_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/change_quotes/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    await settings_handler(message, state)


@rp.message(Command("settings"))
async def command_settings_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await settings_handler(message, state)


@rp.message(F.text == "–î–æ–º–∞—à–∫–∞üìù")
async def homework_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Homework.start)
    if await check_for_admin(message.chat.id) in ["admin", "superuser"]:
        keyboard = keyboards.homework_main_admin_rp_kb()
    else:
        keyboard = keyboards.homework_main_user_rp_kb()
    await message.answer(
        text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π:",
        reply_markup=keyboard,
    )


@rp.message(F.text == "–î–æ–º–∞—à–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞‚è∞", HomeworkStateFilter)
async def tomorrow_homework_handler(
    message: Message,
    state: FSMContext,
) -> None:
    response = await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/get_tomorrow_homework/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": message.chat.id,
        },
    )
    response_data = response.json()
    if response_data:
        for record in response_data:
            homework = response_data[record]
            await generate_homework(homework, record, message)
    else:
        await message.answer("–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ")
    await homework_handler(message, state)


@rp.message(Command("tomorrow"))
async def command_homework_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await tomorrow_homework_handler(message, state)


@rp.message(F.text == "–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Çüìö", HomeworkStateFilter)
async def get_subject_hw_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(Homework.subject)
    subjects = await get_user_subjects(message.chat.id)
    subjects.append("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–º–∞—à–∫—É",
        reply_markup=keyboards.homework_subject_in_kb(
            subjects=subjects,
            add=False,
        ),
    )


@rp.callback_query(F.data.startswith("homework_subject_"), HomeworkStateFilter)
async def callback_homework_subject(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await state.set_state(Homework.subject)
    subject = call.data.split("_")[-1]
    if subject != "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/get_homework_for_subject/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": call.from_user.id,
                "subject": subject.lower(),
            },
        )
        response_data = response.json()
        await generate_homework(response_data, 0, call.message)
    else:
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/get_mailing/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": call.from_user.id,
            },
        )
        response_data = response.json()
        response_data["subject"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        await generate_homework(response_data, 0, call.message)


@rp.message(Command("subject"))
async def command_redirect_homework_subject(
    message: Message,
    state: FSMContext,
) -> None:
    await get_subject_hw_handler(message, state)


@rp.message(F.text.lower().in_(SUBJECTS))
async def enter_subject_handler(
    message: Message,
) -> None:
    subject = SUBJECTS[message.text.lower()]
    if subject != "info":
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/get_homework_for_subject/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": message.chat.id,
                "subject": subject,
                "use_abbreviation": True,
            },
        )
        response_data = response.json()
        if response.status_code == 406:
            await message.answer("–í —Ç–≤–æ–µ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
    else:
        response = await asyncio.to_thread(
            requests.post,
            url=DOCKER_URL + "/api/v1/get_mailing/",
            json={
                "api_key": os.getenv("API_KEY"),
                "telegram_id": message.chat.id,
            },
        )
        response_data = response.json()
        response_data["subject"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    await generate_homework(homework=response_data, record=0, message=message)


@rp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—åüìã", HomeworkStateFilter)
async def add_homework_handler(
    message: Message,
    state: FSMContext,
    mailing: bool = False,
) -> None:
    await state.set_state(AddHomework.choose_subject)
    subjects = await get_user_subjects(message.chat.id)
    subjects.append("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    keyboard = keyboards.homework_subject_in_kb(
        subjects=subjects,
        add=True,
    )
    text = "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É"
    if mailing:
        keyboard = keyboards.get_mailings()
        text = "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏"
    await message.answer(
        text=text,
        reply_markup=keyboard,
    )


@rp.callback_query(
    F.data.startswith("add_hw_subject_"),
    AddHomeworkStateFilter,
)
async def choose_subject_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    subject = call.data.split("_")[-1]
    await state.update_data(choose_subject=subject)
    await state.update_data(images=[])
    await state.update_data(files=[])
    await state.update_data(message_id=[])
    await state.set_state(AddHomework.add_descriptions_images)
    await call.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject}")
    await call.message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–æ–º–∞—à–∫—É\n(–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
        " –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)",
    )


@rp.callback_query(F.data == "add_homework_files", AddHomeworkStateFilter)
async def add_homework_files_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await call.message.delete_reply_markup()
    await call.message.answer(
        text="–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –¥–æ–º–∞—à–∫–µ"
        " (—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–±)\n"
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - –¥–æ–∂–¥–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º,"
        " —á—Ç–æ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=keyboards.add_homework_maximum_in_kb(),
    )
    await state.set_state(AddHomework.add_files)


@rp.message(
    AddHomework.add_files,
    F.content_type.in_([ContentType.DOCUMENT, ContentType.AUDIO]),
)
async def add_files_handler(
    message: Message,
    state: FSMContext,
) -> None:
    state_data = await state.get_data()
    subject = state_data["choose_subject"]
    if message.document:
        for idx, document in enumerate(message.document):
            if document[0] == "file_id":
                await message.answer(
                    f"–§–∞–π–ª {html.italic(message.document.file_name)}"
                    f" –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                )
                await bot_save_files(
                    bot,
                    "files",
                    "files",
                    document,
                    message,
                    subject,
                    state,
                    message.document.file_name,
                )
    if message.audio:
        for idx, music in enumerate(message.audio):
            if music[0] == "file_id":
                await message.answer(
                    f"–§–∞–π–ª {html.italic(message.audio.file_name)}"
                    f" –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É",
                )
                await bot_save_files(
                    bot,
                    "music",
                    "files",
                    music,
                    message,
                    subject,
                    state,
                    message.audio.file_name,
                )


@rp.callback_query(F.data == "publish_hw")
async def publish_hw_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    state_data = await state.get_data()
    status_code, homework_id = await publish_homework(
        data=state_data,
        telegram_id=call.message.chat.id,
    )
    if status_code == 200:
        if homework_id != -1:
            await call.message.answer(
                text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
                reply_markup=keyboards.to_edit_homework_in_kb(homework_id),
            )
        else:
            await call.message.answer(
                text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
                reply_markup=keyboards.delete_mailing_in_kb(),
            )
    await state.clear()
    await command_menu_handler(call.message)


@rp.message(Command("publish"), PublishHomeworkStateFilter)
async def command_publish_hw_handler(
    message: Message,
    state: FSMContext,
) -> None:
    state_data = await state.get_data()
    status_code, homework_id = await publish_homework(
        data=state_data,
        telegram_id=message.chat.id,
    )
    if status_code == 200:
        if homework_id != -1:
            await message.answer(
                text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
                reply_markup=keyboards.to_edit_homework_in_kb(homework_id),
            )
        else:
            await message.answer(
                text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
                reply_markup=keyboards.delete_mailing_in_kb(),
            )
    await state.clear()
    await command_menu_handler(message)


@rp.message(
    AddHomework.add_descriptions_images,
    F.content_type.in_([ContentType.TEXT, ContentType.PHOTO]),
)
async def add_description_images_handler(
    message: Message,
    state: FSMContext,
) -> None:
    text = message.caption or message.text
    state_data = await state.get_data()
    subject = state_data["choose_subject"]
    if text:
        await state.update_data(text=text)
    data = await state.get_data()
    state_message_id = data["message_id"]
    text = data["text"]
    state_message_id.append(message.message_id)
    await state.update_data(message_id=state_message_id)
    if message.photo and text:
        if len(state_message_id) == 1:
            await message.answer(
                text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                reply_markup=keyboards.add_homework_in_kb(),
            )
    elif message.photo:
        if len(state_message_id) == 1:
            await message.answer(
                text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                reply_markup=keyboards.add_homework_in_kb(),
            )
    elif not message.photo and message.text:
        await message.answer(
            text="–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=keyboards.add_homework_in_kb(),
        )
    await state.set_state(AddHomework.add_descriptions_images)
    if message.photo:
        for idx, photo in enumerate(message.photo):
            if idx == len(message.photo) - 1:
                await bot_save_files(
                    bot,
                    "img",
                    "images",
                    photo,
                    message,
                    subject,
                    state,
                )


@rp.message(Command("new"))
async def command_add_homework_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await add_homework_handler(message, state)


@rp.message(Command("stop"), AddHomeworkStateFilter)
async def command_stop_add_homework_handler(
    message: Message,
) -> None:
    await command_menu_handler(message)


@rp.callback_query(F.data.startswith("edit_homework_"))
async def edit_homework_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await state.set_state(EditHomework.start)
    await state.update_data({"homework_id": call.data.split("_")[-1]})
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.edit_homework_in_kb(),
    )


@rp.callback_query(F.data == "edit_hw_text", EditHomeworkStateFilter)
async def edit_homework_description_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    await state.set_state(EditHomework.edit_text)
    data = await state.get_data()
    homework_data = await get_homework_from_id(
        telegram_id=call.message.chat.id,
        homework_id=data["homework_id"],
    )
    await call.message.answer(
        text=(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{homework_data['description']}\n\n"
            f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        ),
    )


@rp.message(EditHomework.edit_text)
async def save_edited_text_handler(
    message: Message,
    state: FSMContext,
) -> None:
    await state.set_state(EditHomework.start)
    await message.answer(f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{message.text}")
    await state.update_data({"description": message.text})
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.edit_homework_in_kb(),
    )


@rp.callback_query(F.data == "edit_hw_save", EditHomeworkStateFilter)
async def save_edit_hw_handler(
    call: CallbackQuery,
    state: FSMContext,
) -> None:
    data = await state.get_data()
    response = await edit_hw_description(
        telegram_id=call.message.chat.id,
        homework_id=data["homework_id"],
        description=data["description"],
    )
    if response[0] == 200:
        await call.message.answer(
            text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            reply_markup=keyboards.to_edit_homework_in_kb(response[1]),
        )
    await state.clear()
    await command_menu_handler(call.message)


@rp.callback_query(F.data == "edit_hw_delete", EditHomeworkStateFilter)
async def delete_edit_hw_handler(
    call: CallbackQuery,
    state: FSMContext,
):
    data = await state.get_data()
    status_code = await delete_homework(
        telegram_id=call.message.chat.id,
        homework_id=data["homework_id"],
    )
    if status_code == 200:
        await call.message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞üóëÔ∏è")
    await state.clear()
    await command_menu_handler(call.message)


@rp.message(Command("add_mailing"))
async def add_mailing(
    message: Message,
    state: FSMContext,
):
    if await check_for_admin(message.chat.id) == "superuser":
        await add_homework_handler(message, state, mailing=True)


@rp.callback_query(F.data == "delete_mailing")
async def delete_mailing_handler(
    call: CallbackQuery,
):
    await asyncio.to_thread(
        requests.post,
        url=DOCKER_URL + "/api/v1/delete_mailing/",
        json={
            "api_key": os.getenv("API_KEY"),
            "telegram_id": call.message.chat.id,
        },
    )
    await call.message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞üóëÔ∏è")
    await call.message.delete()
    await command_menu_handler(call.message)
